Extending Kubernetes with Go
Workshop - Gophercon Brazil 2018

André Carvalho e Cezar Sá

* Agenda
.html images/style.html

- Setup
- Concepts
- Kubernetes API basics
- Client-go
- Custom Resource Definitions (CRDs)
- Controllers
- Operators

* Requirements

This presentation and the code we are going to use is available at:

[[https://github.com/andrestc/go-kubernetes-workshop]]

We'll need:

- Go
- Minikube - For running a local kubernetes cluster
- Kubectl - For interacting with the kubernetes cluster

* Setup

- Downloading the code

  $ go get -d github.com/andrestc/go-kubernetes-workshop/...
  $ cd $GOPATH/andrestc/go-kubernetes-workshop

- Installing Minikube
  
[[https://github.com/kubernetes/minikube#installation]]

- Installing Kubectl

[[https://kubernetes.io/docs/tasks/tools/install-kubectl/]]

- Installing Operator SDK CLI (for later exercises)

[[https://github.com/operator-framework/operator-sdk/blob/master/doc/user-guide.md#install-the-operator-sdk-cli]]

* What is Kubernetes

At it's core Kubernetes is a container orchestrator.

It knows:

- *How* to start containers
- *When* to start containers
- *Where* to start containers

: One of the official definitions is "Kubernetes is an open-source system for
: automating deployment, scaling, and management of containerized applications."
: It does a lot of things not directly related to containers but containers are
: the core functionality.

: Ask if the audience is familiar with the concept of plain docker containers
: and basic explanation if needed.

* Concepts

Basic objects:

- Pods
- Services
- Endpoints
- Nodes
- ...

Kubernetes provides an API for CRUDing each available resource.

* Concepts (YAML)

Usually YAML files are used to represent a resource, example:

  apiVersion: v1
  kind: Pod
  metadata:
      name: mypod
  spec:
      containers:
        - name: mypod1
          image: busybox

* Control Plane

Resources created on the API describe the *desired* state.

The Control Plane is in an infinite loop trying to make the *desired* state a reality.

# TODO: better image
.image images/kube-arch.png _ 550
.caption By Khtan66 - Own work, CC BY-SA 4.0, https://commons.wikimedia.org/w/index.php?curid=53571935

: A YAML file with a resource description always describe a desired state,
: this desired state may never come true depending on the available resources for the
: cluster.

* Pod

Similar to docker containers, except one pod can contain more than one container.

Containers in the same pod:
- Are scheduled on the same machine;
- Share the Network namespace (same IP);
- Share volumes assigned to the Pod.

.code labs/xx-kubectl/pod.yaml

: PID namespace can also optionally be shared as of 1.10.

* Pod (2)

- Pods will die, on their own they do not provide resilience;

- A pod scheduled to a node will always run on the same node;

- A higher level abstraction is needed to provide resilience.

* Service and Endpoint

- Pods may vanish anytime their IP address will also vanish;

- Services provide a stable IP and Name to find applications on Kubernetes;

.code labs/xx-kubectl/service.yaml

* Service and Endpoint

- For each pod that matches the selector kubernetes will create an Endpoint object;

- An endpoint is only created for healthy Pod IPs.

* Manipulating objects

- API

- kubectl CLI

* Hands on: kubectl

- Bootstrap minikube and check cluster

  $ minikube start
  $ kubectl cluster-info

- Manipulating resources with kubectl

  $ kubectl create -f ./labs/xx-kubectl/pod.yaml
  $ kubectl get pod
  $ kubectl create -f ./labs/xx-kubectl/service.yaml
  $ kubectl get service
  $ minikube service list

: Do a demo and then ask attendees to do the same
: Explain why minikube is used (only to get node IP)

* Controller objects

- Deployment;
- ReplicaSet;
- many others...

* What do controllers do

- Control loop that listen for changes and do something;

- Dinamically create or manipulate basic objects;

- Built-in controllers are implemented in the `controller-manager` component.

- The scheduler is also a controller:
-    Watch for created pods;
-    Assigns a node to the pod.

- The kubelet daemon is also a controller:
-    Watch for pods with a node assigned;
-    Start new containers on the container runtime (usually docker).

: The workshop will focus on controllers from now on. After taking a look
: at built-in controllers we'll work further on creating our own controller.

* Deployment

.code labs/xx-kubectl/deployment.yaml

* Hands on: Create deployment with kubectl

  $ kubectl create -f ./labs/xx-kubectl/deployment.yaml
  $ kubectl get pod,deployment,replicaset

- Deployments manage the pod lifecycle;
- Ensure the number of replica pods exist;
- If a node is down a new pod will be created to replace the missing one;
- Manages rolling update of new pod templates.

* ReplicaSet

- Does most of the work for the deployment controller, except rolling updates;
- It's not usually created manually.

* What does the controller do

Deployment controller

- Watches for deployment object to appear;
- Creates a new replicaSet object every time the template field is changed;
- Updates the old replicaSet replicas count to zero.

ReplicaSet controller

- Watches for replica set objects;
- Create new pods matching the number of replica pods;
- Watches for pods matching the selector labels;
- If a pod dies creates a new one to replace it.

: Clarify this is an overly simplified explanation

* Hands on: Let's make a simple controller

  $ kubectl get pod --no-headers --watch-only -o 'go-template={{println .metadata.name}}' \
    | xargs -I{} kubectl label -f pod {} ack=true &

  $ kubectl get pod mypod --show-labels
  NAME      READY     STATUS    RESTARTS   AGE       LABELS
  mypod     1/1       Running   0          4d        app=myapp

  $ kubectl label pod mypod a=b

  $ kubectl get pod mypod --show-labels
  NAME      READY     STATUS    RESTARTS   AGE       LABELS
  mypod     1/1       Running   0          4d        a=b,ack=true,app=myapp

* Hands on: kubectl bonus

  $ kubectl -v=9 get pod

* Kubernetes API

* Kubernetes API basics

  $ kubectl proxy &

[[http://127.0.0.1:8001/openapi/v2]]

* Kubernetes API basics

Core objects:

- /api/<version>/<resource>
- [[http://127.0.0.1:8001/][/]]
- [[http://127.0.0.1:8001/api][/api]]
- [[http://127.0.0.1:8001/api/v1][/api/v1]]
- [[http://127.0.0.1:8001/api/v1/pods][/api/v1/pods]]

With namespaces:

- /api/<version>/<namespaces>/<namespace name>/<resource>
- [[http://127.0.0.1:8001/api/v1/namespaces/default/pods][/api/v1/namespaces/default/pods]]
- [[http://127.0.0.1:8001/api/v1/namespaces/default/pods/mypod][/api/v1/namespaces/default/pods/mypod]]

: Highlight verbs in /api/v1 call for pods

* Kubernetes API basics

Non-core objects:

- /apis/<group>/<version>/<resource>
- [[http://127.0.0.1:8001/apis][/apis]]
- [[http://127.0.0.1:8001/apis/apps/v1][/apis/apps/v1]]
- [[http://127.0.0.1:8001/apis/apps/v1/deployments][/apis/apps/v1/deployments]]

With namespaces:

- /apis/<group>/<version>/<namespaces>/<namespace name>/<resource>
- [[http://127.0.0.1:8001/apis/apps/v1/namespaces/default/deployments][/apis/apps/v1/deployments]]
- [[http://127.0.0.1:8001/apis/apps/v1/namespaces/default/deployments/nginx-deployment][/apis/apps/v1/deployments/nginx-deployment]]

* Kubernetes API basics

Custom Resource Definitions (CRDs):

- /apis/<my group>/<my version>/<my resource>

- We'll talk more about custom resources later on.

* Extending Kubernetes

There are several ways to extend Kubernetes

- kubectl plugins
- API Access extensions
- Scheduler Extensions
- Network/Storage plugins
- *Custom* *Resources*

- *Controllers*


.link https://kubernetes.io/docs/concepts/extend-kubernetes/extend-cluster/#extension-points

* Kubernetes API - examples

Listing pods using the API:

  $ curl http://127.0.0.1:8001/api/v1/namespaces/default/pods[?watch=true]
  
  OR
  
  $ kubectl get --raw /api/v1/namespaces/default/pods[?watch=true]

Creating a new pod using the API:

  $ curl -XPOST http://127.0.0.1:8001/api/v1/namespaces/default/pods \
    -H "Content-Type: application/json" -d \
    '{"apiVersion": "v1", "kind": "Pod", "metadata": {"name": "mypod2"},
      "spec": {"containers": [{"name": "mycont","image": "nginx"}]}}'

  OR

  $ kubectl create --raw /api/v1/namespaces/default/pods -f - \
    <<< '{"apiVersion": "v1", "kind": "Pod", "metadata": {"name": "mypod2"},
      "spec": {"containers": [{"name": "mycont","image": "nginx"}]}}'

* Hands On: API

- Start local proxy authenticating requests to the cluster:
  kubectl proxy &

- Use curl, or browse or kubectl --raw to list APIs:
  curl 127.0.0.1:8001/apis/

- Let's add a new label to a namespace and check it's there:
  kubectl label namespace default mykey=myvalue
  kubectl get namespace default -o json
  curl 127.0.0.1:8001/api/v1/namespaces/default

- Save the JSON and change the label using your favorite editor;
- Update the namespace using curl:
  curl -H "Content-Type: application/json" -X PUT -d ./updatedjsonfile.json \
    http://127.0.0.1:8001/api/v1/namespaces/default


* Client-go

[[https://github.com/kubernetes/client-go]]

How to connect to the API, parse config files, caching and informers logic.

[[https://github.com/kubernetes/api]]

Structs defining each object (Pod, Container, Deployment, etc...) and its methods.

[[https://github.com/kubernetes/apimachinery]]

Everything else :) Error types, label and field manipulation, watch logic, a few types common to all objects (ObjectMeta, ListOptions, etc...)

Import paths:

- k8s.io/client-go
- k8s.io/api
- k8s.io/apimachinery

* Where do PRs go?

[[https://github.com/kubernetes/kubernetes/tree/master/staging/src/k8s.io]]

.image images/staging-k8s-repo.png _ 900

* Backward compatible? Why?

.image images/client-go-compat.png _ 900

: Every kubernetes release is a major change to the client-go
: more often than not requiring code changes.
: A good thing is that old releases usually still work on 
: newer kubernetes only without new features.

* Using client-go

`labs/01-client-go/main.go`

.code labs/01-client-go/main.go /CREATE CLIENT/,/CREATE CLIENT/ HL1

Args:

- Override URL for connecting to cluster;
- kubeConfig file path (used by kubectl, usually at ~/.kube/config).

If kubeconfig path is empty a `InClusterConfig` will be used.

* Using client-go

.code labs/01-client-go/main.go /CREATE CLIENT/,/CREATE CLIENT/ HL2

Args:

- `client.Config{}` instance, either created manually or returned previously.

* Using client-go

.code labs/01-client-go/main.go /LIST PODS/,/LIST PODS/

- `CoreV1()`: API Group, other possibilities are `AppsV1()`, `NetworkingV1()`, ...
- `Pods(ns)`: Resource name and namespace parameter, empty namespace equals all namespaces.
- `List(args)`: Operation its arguments, other possibilities are `Get()`, `Create()`, `Update()`...

* Hands On: Client-go basic

  $ cd $GOPATH/github.com/andrestc/go-kubernetes-workshop/labs/01-client-go
  $ go run main.go

The current example list pods for all namespaces, let's change it to:

- Create a new pod if it doesn't exist before listing pods;

- List all nodes.

* Client-go Informers

Informers are an abstraction used for two purposes:

- Getting *informed* when an object changes (Informer);

- Listing objects with minimal impact on kubernetes API (Lister).

* Client-go Informers (2)

How do they work? (Pods used as an example, informers work for any resource.)

- Call `/api/v1/pods` to list all existing Pods and add them to a in-memory cache;

- Call `/api/v1/pods?watch=true` to watch for pods added, updated or removed, this call will block forever;

- Every time the watch call yields an object update the in-memory cache accordingly. Adding, updating or removing the yielded object.

* Client-go Informers (3)

Benefits:

- Listing pods is a simple matter of returning the objects in the in-memory cache, no need to call the API.

- We can add hooks to when the in-memory cache is being updated, getting ourselves notified when objects are updated.

: Imagine having an application with an API call that must list pods matching
: a certain filter. Without informers each request would have to hit the kubernetes
: API. With informers we only hit the API once regardless of the number of incoming
: requests.

* Client-go Informers code (1)

.code ./labs/01-client-go-informers/main.go /POD INFORMER/,/POD INFORMER/ HL1

- `NewSharedInformerFactory` - A shared informer factory that can be used simultaneously by many goroutines.

Arguments:

- `clientset`: The same clientset used in previous exercises;
- `resyncInterval`: An interval the update callback will be triggered for all objects in cache.

: We'll see more about the resync interval, it's useful when trying to match some kind
: of real world resource to it's expected state described by the object. Every resync
: interval we would check if this holds true.

* Client-go Informers code (2)

.code ./labs/01-client-go-informers/main.go /POD INFORMER/,/POD INFORMER/ HL2

- One informer must be created for each monitored resource;

- Same logic as basic API applies: Group + Version + Resource.

* Client-go Informers code - .Informer()

.code ./labs/01-client-go-informers/main.go /POD HOOKS/,/POD HOOKS/

- `AddFunc` is called once for each object when the informer starts and again for new objects;
- `UpdateFunc` is called when a pod is updated but also every `resyncInterval`;
- `DeleteFunc` is called only when a pod is removed.
- The `Start` calls start receives a channel used to stop the informer if necessary. 

: In UpdateFunc old is the value currently in the cache, not exactly the
: previous version of the Pod. Many updates may arrive as a single UpdateFunc call.

* Client-go Informers code - .Informer()

.code ./labs/01-client-go-informers/main.go /POD HOOKS/,/POD HOOKS/

- Arguments to the hooks are live pointers to the object stored inside the cache;
- Modifying them is forbidden as this would mess-up future UpdateFunc calls, use `DeepCopy` instead:

  $ obj.(*v1.Pod).DeepCopy()

* Client-go Informers code - .Lister()

.code ./labs/01-client-go-informers/main.go /POD LISTER/,/POD LISTER/

- Get or List pods in the informer's cache. This call will never hit the kubernetes API, it's only accessing the cache.

* Hands-on: Client-go informers

  $ cd $GOPATH/github.com/andrestc/go-kubernetes-workshop/labs/01-client-go-informers
  $ go run main.go

- You should see a list of pod names and the message:
  Error getting pod: pod "shell" not found.

- In a new terminal create a pod named `shell` with some labels and check if it the update callback was called and if it's now available in the `Lister`;

- Change the update func to only print pods if it's changed;

- Use `Lister().List()` to list pods in the informer cache.

* Custom Resource Definitions (CRDs)

* What's a resource

- Resources are objects that share a similar structure:

.code ./examples/xx-crds/structs.go /POD STRUCT/,/POD STRUCT/ HL1

- `TypeMeta`: Describes resource `Kind` and `Version`, in this case they would be `"Pod"` and `"v1"`;
- `ObjectMeta`: Common information all resource must have: `Name`, `Labels`, `Annotations`, `Namespace`, `Version`, `ResourceVersion`, various timestamps, etc...

* What's a resource

.code ./examples/xx-crds/structs.go /POD STRUCT/,/POD STRUCT/ HL2

- `<ResourceName>Spec`: Specific for each object, describes the desired state of the object, directly defined by the API user: desired nodes, container image, command, etc...
- `<ResourceName>Status`: What's the cluster current state in regard to the desired state: current node, process state, process exit code, timestamps for each state, etc...

* What's a resource

.code ./examples/xx-crds/structs.go /POD LIST STRUCT/,/POD LIST STRUCT/

- `<ResourceName>List` struct: Returned by list API calls with the requested `Items` resource objects.


* Custom Resource Definitions (CRDs)

We can use Kubernetes to store custom objects called Custom Resources
  
  apiVersion: samplecontroller.k8s.io/v1alpha1
  kind: Foo
  metadata:
    name: example-foo
  spec:
    deploymentName: example-foo
    replicas: 1

Custom resources are defined by a Custom Resource Definition

  apiVersion: apiextensions.k8s.io/v1beta1
  kind: CustomResourceDefinition
  metadata:
    name: foos.samplecontroller.k8s.io
  spec:
    group: samplecontroller.k8s.io
    version: v1alpha1
    names:
      kind: Foo
      plural: foos
    scope: Namespaced

* CRDs - Validation

  apiVersion: apiextensions.k8s.io/v1beta1
  kind: CustomResourceDefinition
  metadata:
    name: foos.samplecontroller.k8s.io
  spec:
    group: samplecontroller.k8s.io
    version: v1alpha1
    names:
      kind: Foo
      plural: foos
    scope: Namespaced
    validation:
      openAPIV3Schema:
        properties:
          spec:
            properties:
              replicas:
                type: integer
                minimum: 1
                maximum: 10


* Hands On: CRDs

- Apply the CRD yaml to your Kubernetes cluster

  kubectl apply -f labs/02-controllers/artifacts/examples/crd.yaml

- Create a few Custom Resources

  kubectl apply -f labs/02-controllers/artifacts/examples/example-foo.yaml

- Check that the resources were created

  kubectl get foo

- Add some validation to your CRD, e.g, replicas must be a integer

* CRDs - Programmatically

- Each Custom Resource is a `struct`

- Kubernetes provides some packages and scripts for code generation

- Some boilerplate is required

* CRDs - Programmatically

*pkg/apis/samplecontroller/v1alpha1/types.go*

.code examples/xx-crds/types.go /START 01/,/FINISH 01/

* CRDs - Programmatically

*pkg/apis/samplecontroller/v1alpha1/types.go*

.code examples/xx-crds/types.go /START 02/,/FINISH 02/

* CRDs - Programmatically

*pkg/apis/samplecontroller/v1alpha1/register.go*

.code examples/xx-crds/register.go /START 01/,/FINISH 01/

* CRDs - Programmatically

*pkg/apis/samplecontroller/v1alpha1/register.go*

.code examples/xx-crds/register.go /START 02/,/FINISH 02/

* CRDs - Programmatically

*pkg/apis/samplecontroller/register.go*

.code examples/xx-crds/outer_register.go

* CRDs - Programmatically

- Bash script to generate boilerplate code based on the annotations

  hack/update-codegen.sh

Generates client, informers, listers...

- Bash script to verify code is up to date

  hack/verify-codegen.sh

Depends on k8s.io/code-generator (tricky to vendor with dep)

Usually, we start by copying the boilerplate and scripts from the Sample Controller

.link https://blog.openshift.com/kubernetes-deep-dive-code-generation-customresources/

* Custom Controllers

* Custom Controllers - Basics

1. *Watch* for changes in the Kubernetes API (Informers, Watch)
2. *Update* other Kubernetes API resources
3. *Update* on other real world objects (APIs, Infrastructure)
4. *Repeat*

* Custom Controllers - Basics

.image images/controllers-1.jpeg _ 700
.caption https://medium.com/@cloudark/kubernetes-custom-controllers-b6c7d0668fdf

* Sample Controller

Creates a *Deployment* for each *Foo*

    apiVersion: samplecontroller.k8s.io/v1alpha1
    kind: Foo
    metadata:
      name: example-foo
    spec:
      deploymentName: example-foo
      replicas: 1

.link https://github.com/kubernetes/sample-controller

* Sample Controller

  ├── hack
  └── pkg
      ├── apis
      │   └── samplecontroller
      │       └── v1alpha1
      ├── client
      │   ├── clientset
      │   │   └── versioned
      │   │       ├── fake
      │   │       ├── scheme
      │   │       └── typed
      │   │           └── samplecontroller
      │   │               └── v1alpha1
      │   │                   └── fake
      │   ├── informers
      │   │   └── externalversions
      │   │       ├── internalinterfaces
      │   │       └── samplecontroller
      │   │           └── v1alpha1
      │   └── listers
      │       └── samplecontroller
      │           └── v1alpha1
      └── signals


* Sample Controller - main.go

.code -numbers examples/02-controllers/main.go /START 01/,/FINISH 01/

* Sample Controller - main.go

.code -numbers examples/02-controllers/main.go /START 02/,/FINISH 02/

* Sample Controller - controller.go

.code -numbers examples/02-controllers/controller.go /START 01/,/FINISH 01/

.code -numbers examples/02-controllers/controller.go /enqueueFoo\(obj interface\{\}\)/,/^}/

.code -numbers examples/02-controllers/controller.go /runWorker\(\)/,/^}/


* Sample Controller - workqueue

.image images/workqueue.png _ 800
.caption https://godoc.org/k8s.io/client-go/util/workqueue


* Sample Controller - controller.go

.code -numbers examples/02-controllers/controller.go /\) processNextWorkItem/,/\) processNextWorkItem/

.code -numbers examples/02-controllers/controller.go /START PROCESS/,/FINISH PROCESS/

.code -numbers examples/02-controllers/controller.go /START PROCESS-02/,/FINISH PROCESS-02/

* Sample Controller - controller.go

.code -numbers examples/02-controllers/controller.go /START 02/,/FINISH 02/

* Sample Controller - controllers.go

.code -numbers examples/02-controllers/controller.go /\) handleObject/,/\) handleObject/

.code -numbers examples/02-controllers/controller.go /START HANDLE-01/,/FINISH/

* Sample Controller - controllers.go

.code -numbers examples/02-controllers/controller.go /START HANDLE-02/,/FINISH/

* Hands On: Custom Controller

.link github.com/andrestc/go-kubernetes-workshop/labs/02-controllers

- Change the sample controller to also maintain a *Service* for each *Foo*

- The user should be able to choose between *ClusterIP* and *NodePort*

- Update *Foo* status to show the *Service*'s IP

* Custom Controllers - References

.link https://github.com/kubernetes/sample-controller
.link https://kccnceu18.sched.com/event/DqvN/writing-kube-controllers-for-everyone-maciej-szulik-red-hat-beginner-skill-level
.link https://medium.com/@cloudark/kubernetes-custom-controllers-b6c7d0668fdf
.link https://github.com/kubernetes/kubernetes/tree/master/pkg/controller


* Operators

* Operators vs Controllers

- Usually operators act on a set of CRDs
- Contain "operations" knowledge
- Many operators already available (Prometheus, etcd, Vault ...)

* Operator SDK

- CLI to bootstrap operators
- Lets you focus on the business logic

Create project

  $ operator-sdk new <my-operator> --api-version=company.example.com/v1beta1 --kind=<my-kind>

Build

  $ operator-sdk build <docker-image>

Run

  $ operator-sdk up local

* Hands On: Operators

Let's design and build a Chaos Operator.

This Operator should watch for some CRDs that define chaos :-)

Example: the CRD can use a selector to select pods and a frequency. The Operator
is going to delete a pod based on the selector with the given frequency.

What other operations can we define?

* Operators - References

.link https://github.com/operator-framework/operator-sdk
.link https://banzaicloud.com/blog/operator-sdk/
.link https://robszumski.com/building-an-operator/
.link https://coreos.com/operators/